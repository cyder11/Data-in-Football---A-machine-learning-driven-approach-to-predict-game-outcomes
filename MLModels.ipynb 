{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Appendix 11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load data\n",
    "df = pd.read_csv('data_cleaned2.csv')\n",
    "odds = pd.read_csv('odds365.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>HomeGoal</th>\n",
       "      <th>AwayGoal</th>\n",
       "      <th>HomeShots</th>\n",
       "      <th>AwayShots</th>\n",
       "      <th>HomeShotsTarget</th>\n",
       "      <th>AwayShotsTarget</th>\n",
       "      <th>HomeFouls</th>\n",
       "      <th>AwayFouls</th>\n",
       "      <th>HomeCorners</th>\n",
       "      <th>AwayCorners</th>\n",
       "      <th>HomeYellows</th>\n",
       "      <th>AwayYellows</th>\n",
       "      <th>HomePoints</th>\n",
       "      <th>AwayPoints</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "      <td>380.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>19.507895</td>\n",
       "      <td>1.568421</td>\n",
       "      <td>1.252632</td>\n",
       "      <td>14.134211</td>\n",
       "      <td>11.144737</td>\n",
       "      <td>4.778947</td>\n",
       "      <td>3.928947</td>\n",
       "      <td>10.152632</td>\n",
       "      <td>10.305263</td>\n",
       "      <td>5.705263</td>\n",
       "      <td>4.552632</td>\n",
       "      <td>1.526316</td>\n",
       "      <td>1.684211</td>\n",
       "      <td>1.615789</td>\n",
       "      <td>1.197368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.989678</td>\n",
       "      <td>1.312836</td>\n",
       "      <td>1.180031</td>\n",
       "      <td>5.855371</td>\n",
       "      <td>4.654002</td>\n",
       "      <td>2.677686</td>\n",
       "      <td>2.283982</td>\n",
       "      <td>3.293532</td>\n",
       "      <td>3.503707</td>\n",
       "      <td>2.971718</td>\n",
       "      <td>2.730627</td>\n",
       "      <td>1.222844</td>\n",
       "      <td>1.209140</td>\n",
       "      <td>1.366684</td>\n",
       "      <td>1.337699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>19.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.250000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            stage    HomeGoal    AwayGoal   HomeShots   AwayShots  \\\n",
       "count  380.000000  380.000000  380.000000  380.000000  380.000000   \n",
       "mean    19.507895    1.568421    1.252632   14.134211   11.144737   \n",
       "std     10.989678    1.312836    1.180031    5.855371    4.654002   \n",
       "min      1.000000    0.000000    0.000000    0.000000    2.000000   \n",
       "25%     10.000000    1.000000    0.000000   10.000000    8.000000   \n",
       "50%     19.500000    1.000000    1.000000   14.000000   11.000000   \n",
       "75%     29.000000    2.000000    2.000000   18.000000   14.000000   \n",
       "max     38.000000    6.000000    6.000000   36.000000   25.000000   \n",
       "\n",
       "       HomeShotsTarget  AwayShotsTarget   HomeFouls   AwayFouls  HomeCorners  \\\n",
       "count       380.000000       380.000000  380.000000  380.000000   380.000000   \n",
       "mean          4.778947         3.928947   10.152632   10.305263     5.705263   \n",
       "std           2.677686         2.283982    3.293532    3.503707     2.971718   \n",
       "min           0.000000         0.000000    0.000000    3.000000     0.000000   \n",
       "25%           3.000000         2.000000    8.000000    8.000000     4.000000   \n",
       "50%           5.000000         4.000000   10.000000   10.000000     5.000000   \n",
       "75%           6.000000         5.250000   12.000000   13.000000     8.000000   \n",
       "max          14.000000        12.000000   23.000000   21.000000    16.000000   \n",
       "\n",
       "       AwayCorners  HomeYellows  AwayYellows  HomePoints  AwayPoints  \n",
       "count   380.000000   380.000000   380.000000  380.000000  380.000000  \n",
       "mean      4.552632     1.526316     1.684211    1.615789    1.197368  \n",
       "std       2.730627     1.222844     1.209140    1.366684    1.337699  \n",
       "min       0.000000     0.000000     0.000000    0.000000    0.000000  \n",
       "25%       2.750000     1.000000     1.000000    0.000000    0.000000  \n",
       "50%       4.000000     1.000000     2.000000    1.000000    1.000000  \n",
       "75%       6.000000     2.000000     2.000000    3.000000    3.000000  \n",
       "max      14.000000     6.000000     5.000000    3.000000    3.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#summary stats of data\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>HomeGoal</th>\n",
       "      <th>AwayGoal</th>\n",
       "      <th>HomeShots</th>\n",
       "      <th>AwayShots</th>\n",
       "      <th>HomeShotsTarget</th>\n",
       "      <th>AwayShotsTarget</th>\n",
       "      <th>HomeFouls</th>\n",
       "      <th>AwayFouls</th>\n",
       "      <th>HomeCorners</th>\n",
       "      <th>AwayCorners</th>\n",
       "      <th>HomeYellows</th>\n",
       "      <th>AwayYellows</th>\n",
       "      <th>HomePoints</th>\n",
       "      <th>AwayPoints</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.500000</td>\n",
       "      <td>1.475000</td>\n",
       "      <td>1.337500</td>\n",
       "      <td>13.862500</td>\n",
       "      <td>11.437500</td>\n",
       "      <td>4.725000</td>\n",
       "      <td>4.525000</td>\n",
       "      <td>10.812500</td>\n",
       "      <td>11.137500</td>\n",
       "      <td>5.250000</td>\n",
       "      <td>4.937500</td>\n",
       "      <td>1.575000</td>\n",
       "      <td>1.700000</td>\n",
       "      <td>1.475000</td>\n",
       "      <td>1.325000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.305744</td>\n",
       "      <td>1.292383</td>\n",
       "      <td>1.157734</td>\n",
       "      <td>6.482193</td>\n",
       "      <td>4.431886</td>\n",
       "      <td>2.751179</td>\n",
       "      <td>2.469946</td>\n",
       "      <td>2.994061</td>\n",
       "      <td>3.385538</td>\n",
       "      <td>2.679033</td>\n",
       "      <td>2.725147</td>\n",
       "      <td>1.260651</td>\n",
       "      <td>1.184285</td>\n",
       "      <td>1.368497</td>\n",
       "      <td>1.357352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.750000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.250000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           stage   HomeGoal   AwayGoal  HomeShots  AwayShots  HomeShotsTarget  \\\n",
       "count  80.000000  80.000000  80.000000  80.000000  80.000000        80.000000   \n",
       "mean    4.500000   1.475000   1.337500  13.862500  11.437500         4.725000   \n",
       "std     2.305744   1.292383   1.157734   6.482193   4.431886         2.751179   \n",
       "min     1.000000   0.000000   0.000000   2.000000   3.000000         1.000000   \n",
       "25%     2.750000   0.000000   0.000000   9.000000   9.000000         3.000000   \n",
       "50%     4.500000   1.000000   1.000000  13.000000  11.000000         4.500000   \n",
       "75%     6.250000   2.000000   2.000000  18.000000  15.000000         6.000000   \n",
       "max     8.000000   6.000000   5.000000  32.000000  21.000000        14.000000   \n",
       "\n",
       "       AwayShotsTarget  HomeFouls  AwayFouls  HomeCorners  AwayCorners  \\\n",
       "count        80.000000  80.000000  80.000000    80.000000    80.000000   \n",
       "mean          4.525000  10.812500  11.137500     5.250000     4.937500   \n",
       "std           2.469946   2.994061   3.385538     2.679033     2.725147   \n",
       "min           0.000000   4.000000   4.000000     1.000000     0.000000   \n",
       "25%           2.000000   9.000000   9.000000     3.000000     3.000000   \n",
       "50%           4.500000  11.000000  11.000000     5.000000     4.500000   \n",
       "75%           6.000000  13.000000  13.000000     7.000000     7.000000   \n",
       "max          11.000000  17.000000  20.000000    12.000000    12.000000   \n",
       "\n",
       "       HomeYellows  AwayYellows  HomePoints  AwayPoints  \n",
       "count    80.000000    80.000000   80.000000   80.000000  \n",
       "mean      1.575000     1.700000    1.475000    1.325000  \n",
       "std       1.260651     1.184285    1.368497    1.357352  \n",
       "min       0.000000     0.000000    0.000000    0.000000  \n",
       "25%       1.000000     1.000000    0.000000    0.000000  \n",
       "50%       2.000000     1.500000    1.000000    1.000000  \n",
       "75%       2.000000     2.000000    3.000000    3.000000  \n",
       "max       6.000000     5.000000    3.000000    3.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create initalisation data set\n",
    "ini=df.iloc[:80,:]\n",
    "ini.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>HomeGoal</th>\n",
       "      <th>AwayGoal</th>\n",
       "      <th>HomeShots</th>\n",
       "      <th>AwayShots</th>\n",
       "      <th>HomeShotsTarget</th>\n",
       "      <th>AwayShotsTarget</th>\n",
       "      <th>HomeFouls</th>\n",
       "      <th>AwayFouls</th>\n",
       "      <th>HomeCorners</th>\n",
       "      <th>AwayCorners</th>\n",
       "      <th>HomeYellows</th>\n",
       "      <th>AwayYellows</th>\n",
       "      <th>HomePoints</th>\n",
       "      <th>AwayPoints</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.00000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>18.510000</td>\n",
       "      <td>1.605000</td>\n",
       "      <td>1.230000</td>\n",
       "      <td>14.27000</td>\n",
       "      <td>10.710000</td>\n",
       "      <td>4.875000</td>\n",
       "      <td>3.705000</td>\n",
       "      <td>10.345000</td>\n",
       "      <td>10.065000</td>\n",
       "      <td>5.885000</td>\n",
       "      <td>4.395000</td>\n",
       "      <td>1.510000</td>\n",
       "      <td>1.725000</td>\n",
       "      <td>1.660000</td>\n",
       "      <td>1.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.797236</td>\n",
       "      <td>1.377849</td>\n",
       "      <td>1.172165</td>\n",
       "      <td>5.74737</td>\n",
       "      <td>4.237414</td>\n",
       "      <td>2.715926</td>\n",
       "      <td>2.142645</td>\n",
       "      <td>3.328871</td>\n",
       "      <td>3.636882</td>\n",
       "      <td>3.002809</td>\n",
       "      <td>2.770805</td>\n",
       "      <td>1.194586</td>\n",
       "      <td>1.239782</td>\n",
       "      <td>1.361495</td>\n",
       "      <td>1.325248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.00000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>18.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.00000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>23.250000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>17.00000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>36.00000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            stage    HomeGoal    AwayGoal  HomeShots   AwayShots  \\\n",
       "count  200.000000  200.000000  200.000000  200.00000  200.000000   \n",
       "mean    18.510000    1.605000    1.230000   14.27000   10.710000   \n",
       "std      5.797236    1.377849    1.172165    5.74737    4.237414   \n",
       "min      9.000000    0.000000    0.000000    0.00000    2.000000   \n",
       "25%     13.750000    1.000000    0.000000   10.00000    8.000000   \n",
       "50%     18.500000    1.000000    1.000000   14.00000   10.000000   \n",
       "75%     23.250000    2.000000    2.000000   17.00000   13.000000   \n",
       "max     29.000000    6.000000    6.000000   36.00000   25.000000   \n",
       "\n",
       "       HomeShotsTarget  AwayShotsTarget   HomeFouls   AwayFouls  HomeCorners  \\\n",
       "count       200.000000       200.000000  200.000000  200.000000   200.000000   \n",
       "mean          4.875000         3.705000   10.345000   10.065000     5.885000   \n",
       "std           2.715926         2.142645    3.328871    3.636882     3.002809   \n",
       "min           0.000000         0.000000    2.000000    3.000000     0.000000   \n",
       "25%           3.000000         2.000000    8.000000    8.000000     4.000000   \n",
       "50%           5.000000         4.000000   10.000000   10.000000     5.000000   \n",
       "75%           7.000000         5.000000   12.000000   12.000000     8.000000   \n",
       "max          12.000000        12.000000   23.000000   21.000000    14.000000   \n",
       "\n",
       "       AwayCorners  HomeYellows  AwayYellows  HomePoints  AwayPoints  \n",
       "count   200.000000   200.000000   200.000000  200.000000  200.000000  \n",
       "mean      4.395000     1.510000     1.725000    1.660000    1.150000  \n",
       "std       2.770805     1.194586     1.239782    1.361495    1.325248  \n",
       "min       0.000000     0.000000     0.000000    0.000000    0.000000  \n",
       "25%       2.000000     1.000000     1.000000    0.000000    0.000000  \n",
       "50%       4.000000     1.000000     2.000000    1.000000    1.000000  \n",
       "75%       6.000000     2.000000     2.000000    3.000000    3.000000  \n",
       "max      14.000000     5.000000     5.000000    3.000000    3.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "training=df.iloc[80:280,:]\n",
    "training.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>HomeGoal</th>\n",
       "      <th>AwayGoal</th>\n",
       "      <th>HomeShots</th>\n",
       "      <th>AwayShots</th>\n",
       "      <th>HomeShotsTarget</th>\n",
       "      <th>AwayShotsTarget</th>\n",
       "      <th>HomeFouls</th>\n",
       "      <th>AwayFouls</th>\n",
       "      <th>HomeCorners</th>\n",
       "      <th>AwayCorners</th>\n",
       "      <th>HomeYellows</th>\n",
       "      <th>AwayYellows</th>\n",
       "      <th>HomePoints</th>\n",
       "      <th>AwayPoints</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.00000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.00000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.00000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>33.510000</td>\n",
       "      <td>1.57000</td>\n",
       "      <td>1.230000</td>\n",
       "      <td>14.08000</td>\n",
       "      <td>11.780000</td>\n",
       "      <td>4.630000</td>\n",
       "      <td>3.900000</td>\n",
       "      <td>9.240000</td>\n",
       "      <td>10.120000</td>\n",
       "      <td>5.710000</td>\n",
       "      <td>4.56000</td>\n",
       "      <td>1.520000</td>\n",
       "      <td>1.590000</td>\n",
       "      <td>1.640000</td>\n",
       "      <td>1.190000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.914592</td>\n",
       "      <td>1.19979</td>\n",
       "      <td>1.221483</td>\n",
       "      <td>5.58801</td>\n",
       "      <td>5.504048</td>\n",
       "      <td>2.557046</td>\n",
       "      <td>2.341975</td>\n",
       "      <td>3.291004</td>\n",
       "      <td>3.248247</td>\n",
       "      <td>3.118194</td>\n",
       "      <td>2.64888</td>\n",
       "      <td>1.259148</td>\n",
       "      <td>1.172884</td>\n",
       "      <td>1.381845</td>\n",
       "      <td>1.353596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.00000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>34.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.00000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>36.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>18.00000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>5.00000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>29.00000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>11.00000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            stage   HomeGoal    AwayGoal  HomeShots   AwayShots  \\\n",
       "count  100.000000  100.00000  100.000000  100.00000  100.000000   \n",
       "mean    33.510000    1.57000    1.230000   14.08000   11.780000   \n",
       "std      2.914592    1.19979    1.221483    5.58801    5.504048   \n",
       "min     27.000000    0.00000    0.000000    2.00000    2.000000   \n",
       "25%     31.000000    1.00000    0.000000   10.00000    7.000000   \n",
       "50%     34.000000    1.00000    1.000000   14.00000   11.000000   \n",
       "75%     36.000000    2.00000    2.000000   18.00000   16.000000   \n",
       "max     38.000000    5.00000    5.000000   29.00000   25.000000   \n",
       "\n",
       "       HomeShotsTarget  AwayShotsTarget   HomeFouls   AwayFouls  HomeCorners  \\\n",
       "count       100.000000       100.000000  100.000000  100.000000   100.000000   \n",
       "mean          4.630000         3.900000    9.240000   10.120000     5.710000   \n",
       "std           2.557046         2.341975    3.291004    3.248247     3.118194   \n",
       "min           0.000000         0.000000    0.000000    3.000000     0.000000   \n",
       "25%           3.000000         2.000000    7.000000    8.000000     3.000000   \n",
       "50%           5.000000         4.000000    9.000000   10.000000     6.000000   \n",
       "75%           6.000000         5.000000   11.000000   12.000000     8.000000   \n",
       "max          12.000000         9.000000   17.000000   18.000000    16.000000   \n",
       "\n",
       "       AwayCorners  HomeYellows  AwayYellows  HomePoints  AwayPoints  \n",
       "count    100.00000   100.000000   100.000000  100.000000  100.000000  \n",
       "mean       4.56000     1.520000     1.590000    1.640000    1.190000  \n",
       "std        2.64888     1.259148     1.172884    1.381845    1.353596  \n",
       "min        0.00000     0.000000     0.000000    0.000000    0.000000  \n",
       "25%        3.00000     1.000000     1.000000    0.000000    0.000000  \n",
       "50%        4.00000     1.000000     1.500000    1.000000    1.000000  \n",
       "75%        6.00000     2.000000     2.000000    3.000000    3.000000  \n",
       "max       11.00000     5.000000     5.000000    3.000000    3.000000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test=df.iloc[280:,:]\n",
    "test.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pivot Tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create privot tables for each of the match-based variables to prepare the outline of times series data based on rolling windows\n",
    "HomeShots = df.pivot_table(index=['HomeTeam'],columns=['stage'], values =['HomeShots'], aggfunc='sum')\n",
    "AwayShots = df.pivot_table(index=['AwayTeam'],columns=['stage'], values =['AwayShots'], aggfunc='sum')\n",
    "HomePoints = df.pivot_table(index=['HomeTeam'],columns=['stage'], values =['HomePoints'], aggfunc='sum')\n",
    "AwayPoints = df.pivot_table(index=['AwayTeam'],columns=['stage'], values =['AwayPoints'], aggfunc='sum')\n",
    "HomeGoals = df.pivot_table(index=['HomeTeam'],columns=['stage'], values =['HomeGoal'], aggfunc='sum')\n",
    "AwayGoals = df.pivot_table(index=['AwayTeam'],columns=['stage'], values =['AwayGoal'], aggfunc='sum')\n",
    "HomeShotsTarget = df.pivot_table(index=['HomeTeam'],columns=['stage'], values =['HomeShotsTarget'], aggfunc='sum')\n",
    "AwayShotsTarget = df.pivot_table(index=['AwayTeam'],columns=['stage'], values =['AwayShotsTarget'], aggfunc='sum')\n",
    "HomeConceded = df.pivot_table(index=['HomeTeam'],columns=['stage'], values =['AwayGoal'], aggfunc='sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"21\" halign=\"left\">HomeGoal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stage</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>29</th>\n",
       "      <th>30</th>\n",
       "      <th>31</th>\n",
       "      <th>32</th>\n",
       "      <th>33</th>\n",
       "      <th>34</th>\n",
       "      <th>35</th>\n",
       "      <th>36</th>\n",
       "      <th>37</th>\n",
       "      <th>38</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AwayTeam</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Arsenal</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bournemouth</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brighton</th>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burnley</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cardiff</th>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chelsea</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crystal Palace</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Everton</th>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fulham</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Huddersfield</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leicester</th>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liverpool</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Man City</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Man United</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Newcastle</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Southampton</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tottenham</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Watford</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Ham</th>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wolves</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               HomeGoal                                              ...   \\\n",
       "stage                1    2    3    4    5    6    7    8    9    10 ...    \n",
       "AwayTeam                                                             ...    \n",
       "Arsenal             NaN  3.0  NaN  2.0  1.0  NaN  NaN  1.0  NaN  2.0 ...    \n",
       "Bournemouth         NaN  1.0  NaN  2.0  NaN  4.0  NaN  0.0  NaN  0.0 ...    \n",
       "Brighton            2.0  NaN  1.0  NaN  2.0  NaN  2.0  NaN  0.0  NaN ...    \n",
       "Burnley             0.0  NaN  4.0  NaN  1.0  NaN  1.0  NaN  5.0  NaN ...    \n",
       "Cardiff             2.0  NaN  0.0  NaN  4.0  NaN  NaN  1.0  NaN  4.0 ...    \n",
       "Chelsea             0.0  NaN  1.0  NaN  NaN  0.0  NaN  0.0  NaN  0.0 ...    \n",
       "Crystal Palace      0.0  NaN  2.0  NaN  0.0  NaN  2.0  NaN  2.0  NaN ...    \n",
       "Everton             2.0  NaN  2.0  NaN  NaN  2.0  NaN  1.0  NaN  2.0 ...    \n",
       "Fulham              NaN  3.0  NaN  2.0  3.0  NaN  3.0  NaN  4.0  NaN ...    \n",
       "Huddersfield        NaN  6.0  NaN  1.0  NaN  3.0  NaN  1.0  NaN  3.0 ...    \n",
       "Leicester           2.0  NaN  1.0  NaN  4.0  NaN  0.0  NaN  3.0  NaN ...    \n",
       "Liverpool           NaN  0.0  NaN  1.0  1.0  NaN  1.0  NaN  0.0  NaN ...    \n",
       "Man City            0.0  NaN  1.0  NaN  NaN  0.0  NaN  0.0  NaN  0.0 ...    \n",
       "Man United          NaN  3.0  NaN  0.0  1.0  NaN  3.0  NaN  2.0  NaN ...    \n",
       "Newcastle           NaN  0.0  NaN  2.0  NaN  0.0  NaN  3.0  NaN  0.0 ...    \n",
       "Southampton         NaN  2.0  NaN  0.0  NaN  3.0  2.0  NaN  0.0  NaN ...    \n",
       "Tottenham           1.0  NaN  0.0  2.0  NaN  1.0  0.0  NaN  0.0  NaN ...    \n",
       "Watford             NaN  1.0  NaN  NaN  NaN  1.0  2.0  NaN  0.0  NaN ...    \n",
       "West Ham            4.0  NaN  3.0  NaN  1.0  NaN  NaN  1.0  NaN  1.0 ...    \n",
       "Wolves              NaN  2.0  NaN  0.0  NaN  1.0  NaN  0.0  NaN  1.0 ...    \n",
       "\n",
       "                                                                  \n",
       "stage            29   30   31   32   33   34   35   36   37   38  \n",
       "AwayTeam                                                          \n",
       "Arsenal         1.0  NaN  3.0  NaN  1.0  0.0  NaN  3.0  NaN  1.0  \n",
       "Bournemouth     NaN  0.0  NaN  2.0  NaN  0.0  NaN  3.0  NaN  5.0  \n",
       "Brighton        NaN  1.0  1.0  NaN  NaN  NaN  0.0  NaN  1.0  NaN  \n",
       "Burnley         NaN  4.0  NaN  NaN  1.0  NaN  2.0  NaN  2.0  NaN  \n",
       "Cardiff         2.0  NaN  NaN  NaN  2.0  2.0  NaN  1.0  NaN  0.0  \n",
       "Chelsea         1.0  NaN  2.0  1.0  NaN  2.0  NaN  1.0  NaN  0.0  \n",
       "Crystal Palace  1.0  NaN  NaN  NaN  2.0  NaN  2.0  NaN  2.0  NaN  \n",
       "Everton         NaN  3.0  NaN  0.0  NaN  2.0  NaN  0.0  NaN  2.0  \n",
       "Fulham          NaN  3.0  NaN  NaN  4.0  NaN  0.0  NaN  1.0  NaN  \n",
       "Huddersfield    1.0  NaN  4.0  2.0  NaN  4.0  NaN  5.0  NaN  1.0  \n",
       "Leicester       2.0  NaN  1.0  NaN  1.0  NaN  2.0  NaN  1.0  NaN  \n",
       "Liverpool       0.0  NaN  1.0  NaN  1.0  NaN  0.0  NaN  2.0  NaN  \n",
       "Man City        0.0  NaN  0.0  0.0  NaN  1.0  NaN  0.0  NaN  1.0  \n",
       "Man United      NaN  2.0  NaN  NaN  2.0  NaN  4.0  NaN  1.0  NaN  \n",
       "Newcastle       2.0  NaN  2.0  2.0  NaN  0.0  NaN  1.0  NaN  0.0  \n",
       "Southampton     3.0  NaN  1.0  0.0  NaN  NaN  3.0  NaN  3.0  NaN  \n",
       "Tottenham       NaN  2.0  NaN  2.0  NaN  NaN  1.0  NaN  1.0  NaN  \n",
       "Watford         NaN  3.0  NaN  2.0  NaN  NaN  1.0  NaN  3.0  NaN  \n",
       "West Ham        NaN  2.0  NaN  NaN  2.0  2.0  NaN  0.0  NaN  1.0  \n",
       "Wolves          NaN  1.0  NaN  2.0  NaN  3.0  NaN  1.0  NaN  2.0  \n",
       "\n",
       "[20 rows x 38 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AwayConceded = df.pivot_table(index=['AwayTeam'],columns=['stage'], values =['HomeGoal'], aggfunc='sum')\n",
    "AwayConceded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#data base Loading"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prepare Data with Time Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import only relevant data\n",
    "df2 = pd.read_csv('data_cleaned3.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>homewin</th>\n",
       "      <th>draw</th>\n",
       "      <th>awaywin</th>\n",
       "      <th>stage</th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>HomePoints</th>\n",
       "      <th>AwayPoints</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>01/01/00</td>\n",
       "      <td>Man United</td>\n",
       "      <td>Leicester</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11/08/18</td>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>11/08/18</td>\n",
       "      <td>Fulham</td>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>11/08/18</td>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>11/08/18</td>\n",
       "      <td>Newcastle</td>\n",
       "      <td>Tottenham</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   homewin  draw  awaywin  stage      Date      HomeTeam        AwayTeam  \\\n",
       "0        3     0        0      1  01/01/00    Man United       Leicester   \n",
       "1        3     0        0      1  11/08/18   Bournemouth         Cardiff   \n",
       "2        0     0        3      1  11/08/18        Fulham  Crystal Palace   \n",
       "3        0     0        3      1  11/08/18  Huddersfield         Chelsea   \n",
       "4        0     0        3      1  11/08/18     Newcastle       Tottenham   \n",
       "\n",
       "   FTHG  FTAG  HomePoints  AwayPoints  \n",
       "0     2     1           3           0  \n",
       "1     2     0           3           0  \n",
       "2     0     2           0           3  \n",
       "3     0     3           0           3  \n",
       "4     1     2           0           3  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.425"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of home wins in initalisation data set\n",
    "df_i=df2.iloc[:80,]\n",
    "homewins_i=np.count_nonzero(df_i['homewin'] == 3)/(len(df_i))\n",
    "homewins_i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.375"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of away wins in initalisation data set\n",
    "awaywins_i=np.count_nonzero(df_i['awaywin'] == 3)/(len(df_i))\n",
    "awaywins_i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.19999999999999996"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of draws in initalisation data set\n",
    "draws_i=1-homewins_i-awaywins_i\n",
    "draws_i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4763157894736842"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of home wins over all data sets\n",
    "homewins=np.count_nonzero(df2['homewin'] == 3)/(len(df2))\n",
    "homewins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1868421052631579"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of draws over all data sets\n",
    "draws=np.count_nonzero(df2['draw'] == 1)/(len(df2))\n",
    "draws"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33684210526315783"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of away wins over all data sets\n",
    "awaywin=1-homewins-draws\n",
    "awaywin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creation of training set and validation data set\n",
    "df3 = df2.iloc[80:,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>homewin</th>\n",
       "      <th>draw</th>\n",
       "      <th>awaywin</th>\n",
       "      <th>stage</th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>HomePoints</th>\n",
       "      <th>AwayPoints</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>Southampton</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>Fulham</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>Man United</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Man City</td>\n",
       "      <td>Burnley</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Newcastle</td>\n",
       "      <td>Brighton</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>West Ham</td>\n",
       "      <td>Tottenham</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Wolves</td>\n",
       "      <td>Watford</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>21/10/18</td>\n",
       "      <td>Everton</td>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>22/10/18</td>\n",
       "      <td>Arsenal</td>\n",
       "      <td>Leicester</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>27/10/18</td>\n",
       "      <td>Brighton</td>\n",
       "      <td>Wolves</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    homewin  draw  awaywin  stage      Date      HomeTeam        AwayTeam  \\\n",
       "80        0     1        0      9  20/10/18   Bournemouth     Southampton   \n",
       "81        3     0        0      9  20/10/18       Cardiff          Fulham   \n",
       "82        0     1        0      9  20/10/18       Chelsea      Man United   \n",
       "83        0     0        3      9  20/10/18  Huddersfield       Liverpool   \n",
       "84        3     0        0      9  20/10/18      Man City         Burnley   \n",
       "85        0     0        3      9  20/10/18     Newcastle        Brighton   \n",
       "86        0     0        3      9  20/10/18      West Ham       Tottenham   \n",
       "87        0     0        3      9  20/10/18        Wolves         Watford   \n",
       "88        3     0        0      9  21/10/18       Everton  Crystal Palace   \n",
       "89        3     0        0      9  22/10/18       Arsenal       Leicester   \n",
       "90        3     0        0     10  27/10/18      Brighton          Wolves   \n",
       "\n",
       "    FTHG  FTAG  HomePoints  AwayPoints  \n",
       "80     0     0           1           1  \n",
       "81     4     2           3           0  \n",
       "82     2     2           1           1  \n",
       "83     0     1           0           3  \n",
       "84     5     0           3           0  \n",
       "85     0     1           0           3  \n",
       "86     0     1           0           3  \n",
       "87     0     2           0           3  \n",
       "88     2     0           3           0  \n",
       "89     3     1           3           0  \n",
       "90     1     0           3           0  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head(11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to append all rolling window times series data to the training and validation data set\n",
    "def new_col2(lag,table, xx, colname, df):\n",
    "    a=df3['stage'].values.tolist()\n",
    "    b=df3[xx].values.tolist()\n",
    "    new=[]\n",
    "    for e1, e2 in zip(a,b):\n",
    "        c=str(e2)\n",
    "        d=int(e1)\n",
    "        new.append(round(table.loc[c][d-lag-1:d-1].sum()/np.count_nonzero(~np.isnan(table.loc[c][d-lag-1:d-1])),2))\n",
    "    df[colname] = new\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4=df2.iloc[80:,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>homewin</th>\n",
       "      <th>draw</th>\n",
       "      <th>awaywin</th>\n",
       "      <th>stage</th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>HomePoints</th>\n",
       "      <th>AwayPoints</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>Southampton</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>Fulham</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>Man United</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Man City</td>\n",
       "      <td>Burnley</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Newcastle</td>\n",
       "      <td>Brighton</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>West Ham</td>\n",
       "      <td>Tottenham</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>20/10/18</td>\n",
       "      <td>Wolves</td>\n",
       "      <td>Watford</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>21/10/18</td>\n",
       "      <td>Everton</td>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>22/10/18</td>\n",
       "      <td>Arsenal</td>\n",
       "      <td>Leicester</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    homewin  draw  awaywin  stage      Date      HomeTeam        AwayTeam  \\\n",
       "80        0     1        0      9  20/10/18   Bournemouth     Southampton   \n",
       "81        3     0        0      9  20/10/18       Cardiff          Fulham   \n",
       "82        0     1        0      9  20/10/18       Chelsea      Man United   \n",
       "83        0     0        3      9  20/10/18  Huddersfield       Liverpool   \n",
       "84        3     0        0      9  20/10/18      Man City         Burnley   \n",
       "85        0     0        3      9  20/10/18     Newcastle        Brighton   \n",
       "86        0     0        3      9  20/10/18      West Ham       Tottenham   \n",
       "87        0     0        3      9  20/10/18        Wolves         Watford   \n",
       "88        3     0        0      9  21/10/18       Everton  Crystal Palace   \n",
       "89        3     0        0      9  22/10/18       Arsenal       Leicester   \n",
       "\n",
       "    FTHG  FTAG  HomePoints  AwayPoints  \n",
       "80     0     0           1           1  \n",
       "81     4     2           3           0  \n",
       "82     2     2           1           1  \n",
       "83     0     1           0           3  \n",
       "84     5     0           3           0  \n",
       "85     0     1           0           3  \n",
       "86     0     1           0           3  \n",
       "87     0     2           0           3  \n",
       "88     2     0           3           0  \n",
       "89     3     1           3           0  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data for all team characteristics based features\n",
    "clubs = {\n",
    "\t\t\"Man United\" : [8.6,769.5,84,84,81,83],\n",
    "\t\t\"Man City\" : [7.89,953.55,85,87,83,85],\n",
    "\t\t\"Chelsea\" : [6.6,787.28,84,85,82,83],\n",
    "\t\t\"Liverpool\" : [6.4,801.9,85,82,81,83],\n",
    "\t\t\"Arsenal\" : [6.39,498.6,85,82,81,82],\n",
    "\t\t\"Tottenham\" : [4.63,751.05,89,83,82,83],\n",
    "\t\t\"Everton\" : [4.28,389.70,80,79,78,79],\n",
    "\t\t\"West Ham\" : [4.2,257.85,79,78,76,79],\n",
    "\t\t\"Crystal Palace\" : [3.63,193.79,79,76,75,77],\n",
    "\t\t\"Leicester\" : [3.57,300.15,79,77,77,78],\n",
    "\t\t\"Southampton\" : [3.51,239.04,76,77,77,77],\n",
    "\t\t\"Bournemouth\" : [2.62,147.83,77,75,76,76],\n",
    "\t\t\"Watford\" : [2.34,147.78,77,78,76,77],\n",
    "\t\t\"Wolves\" : [2.31,177.93,75,80,75,76],\n",
    "\t\t\"Fulham\" : [2.27,223.43,76,77,74,76],\n",
    "\t\t\"Brighton\" : [2.23,161.73,76,76,75,76],\n",
    "\t\t\"Newcastle\" : [2.17,159.03,76,76,76,76],\n",
    "\t\t\"Burnley\" : [2.11,169.43,77,77,78,78],\n",
    "\t\t\"Huddersfield\" : [1.63,104.49,75,75,75,75],\n",
    "\t\t\"Cardiff\" : [1.26,85.64,73,74,73,73],\n",
    "\t}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  app.launch_new_instance()\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    }
   ],
   "source": [
    "#append team characteristic-based features to training and validation data set\n",
    "a=df3['HomeTeam'].values.tolist()\n",
    "b=df3['AwayTeam'].values.tolist()\n",
    "HomeSalary=[]\n",
    "HomeValue=[]\n",
    "HomeStrength=[]\n",
    "AwaySalary=[]\n",
    "AwayValue=[]\n",
    "AwayStrength=[]\n",
    "for e1, e2 in zip(a,b):\n",
    "    HomeSalary.append(clubs[e1][0])\n",
    "    HomeValue.append(clubs[e1][1])\n",
    "    HomeStrength.append(clubs[e1][5])\n",
    "    AwaySalary.append(clubs[e2][0])\n",
    "    AwayValue.append(clubs[e2][1])\n",
    "    AwayStrength.append(clubs[e2][5])\n",
    "df4['HomeAvgSalary']=HomeSalary\n",
    "df4['HomeValue']=HomeValue\n",
    "df4['HomeStrength']=HomeStrength\n",
    "df4['AwayAvgSalary']=AwaySalary\n",
    "df4['AwayValue']=AwayValue\n",
    "df4['AwayStrength']=AwayStrength\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of shots by the home team in home games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgHomeShotsHomeLast'+str(e)\n",
    "    new_col2(e,HomeShots, 'HomeTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of shots by the away team in away games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgAwayShotsAwayLast'+str(e)\n",
    "    new_col2(e,AwayShots, 'AwayTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of points by the home team in home games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgHomePointsHomeLast'+str(e)\n",
    "    new_col2(e,HomePoints, 'HomeTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of points by the away team in away games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgAwayPointsAwayLast'+str(e)\n",
    "    new_col2(e,AwayPoints, 'AwayTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of goals by the home team in home games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgHomeGoalsHomeLast'+str(e)\n",
    "    new_col2(e,HomeGoals, 'HomeTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of goals by the sway team in away games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgAwayGoalsAwayLast'+str(e)\n",
    "    new_col2(e,AwayGoals, 'AwayTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of shots on target by the home team in home games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgHomeShotsTargetHomeLast'+str(e)\n",
    "    new_col2(e,HomeShotsTarget, 'HomeTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of shots on target by the away team in away games to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgAwayShotsTargetAwayLast'+str(e)\n",
    "    new_col2(e,AwayShotsTarget, 'AwayTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of conceded by the home team to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgHomeConcededLast'+str(e)\n",
    "    new_col2(e,HomeConceded, 'HomeTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "#append average number of conceded by the away team to the training and validation data set for the rolling windows of the last 4-8 matches\n",
    "for e in range(4,9):\n",
    "    a='AvgAwayConcededLast'+str(e)\n",
    "    new_col2(e,AwayConceded, 'AwayTeam',a, df4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(300, 67)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n"
     ]
    }
   ],
   "source": [
    "#add variable for home win / draw /away win to the data set\n",
    "l1=df4['FTHG'].values.tolist()\n",
    "l2=df4['FTAG'].values.tolist()\n",
    "new=[]\n",
    "for e1, e2 in zip (l1,l2):\n",
    "    if e1>e2:\n",
    "        new.append(1)\n",
    "    elif e2>e1:\n",
    "        new.append(2)\n",
    "    else:\n",
    "        new.append(0)\n",
    "df4['outcome']= new"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# x and y for 3 target variables "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#! encoded training data sets are accidentially called test and test is called vali later on!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up y variable\n",
    "y = df4.outcome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up x variables\n",
    "x= df4.drop(['homewin', 'draw', 'awaywin', 'stage', 'Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'outcome', 'HomePoints', 'AwayPoints'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#x2=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''ll=[]\n",
    "for e in range (0,300):\n",
    "    if e<200:\n",
    "        ll.append('training')\n",
    "    else:\n",
    "        ll.append('test')\n",
    "x2['set']=ll  \n",
    "x2['result']=y'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#x2.to_csv('x2.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeAvgSalary</th>\n",
       "      <th>HomeValue</th>\n",
       "      <th>HomeStrength</th>\n",
       "      <th>AwayAvgSalary</th>\n",
       "      <th>AwayValue</th>\n",
       "      <th>AwayStrength</th>\n",
       "      <th>AvgHomeShotsHomeLast4</th>\n",
       "      <th>AvgHomeShotsHomeLast5</th>\n",
       "      <th>AvgHomeShotsHomeLast6</th>\n",
       "      <th>AvgHomeShotsHomeLast7</th>\n",
       "      <th>...</th>\n",
       "      <th>AvgHomeConcededLast4</th>\n",
       "      <th>AvgHomeConcededLast5</th>\n",
       "      <th>AvgHomeConcededLast6</th>\n",
       "      <th>AvgHomeConcededLast7</th>\n",
       "      <th>AvgHomeConcededLast8</th>\n",
       "      <th>AvgAwayConcededLast4</th>\n",
       "      <th>AvgAwayConcededLast5</th>\n",
       "      <th>AvgAwayConcededLast6</th>\n",
       "      <th>AvgAwayConcededLast7</th>\n",
       "      <th>AvgAwayConcededLast8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>2.62</td>\n",
       "      <td>147.83</td>\n",
       "      <td>76</td>\n",
       "      <td>3.51</td>\n",
       "      <td>239.04</td>\n",
       "      <td>77</td>\n",
       "      <td>10.5</td>\n",
       "      <td>10.50</td>\n",
       "      <td>12.67</td>\n",
       "      <td>12.67</td>\n",
       "      <td>...</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>1.26</td>\n",
       "      <td>85.64</td>\n",
       "      <td>73</td>\n",
       "      <td>2.27</td>\n",
       "      <td>223.43</td>\n",
       "      <td>76</td>\n",
       "      <td>10.5</td>\n",
       "      <td>11.67</td>\n",
       "      <td>11.67</td>\n",
       "      <td>11.75</td>\n",
       "      <td>...</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.33</td>\n",
       "      <td>2.50</td>\n",
       "      <td>2.50</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.67</td>\n",
       "      <td>2.67</td>\n",
       "      <td>2.75</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>6.60</td>\n",
       "      <td>787.28</td>\n",
       "      <td>83</td>\n",
       "      <td>8.60</td>\n",
       "      <td>769.50</td>\n",
       "      <td>83</td>\n",
       "      <td>14.0</td>\n",
       "      <td>17.33</td>\n",
       "      <td>17.33</td>\n",
       "      <td>19.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.67</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>1.63</td>\n",
       "      <td>104.49</td>\n",
       "      <td>75</td>\n",
       "      <td>6.40</td>\n",
       "      <td>801.90</td>\n",
       "      <td>83</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.00</td>\n",
       "      <td>9.67</td>\n",
       "      <td>9.67</td>\n",
       "      <td>...</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>7.89</td>\n",
       "      <td>953.55</td>\n",
       "      <td>85</td>\n",
       "      <td>2.11</td>\n",
       "      <td>169.43</td>\n",
       "      <td>78</td>\n",
       "      <td>28.0</td>\n",
       "      <td>26.67</td>\n",
       "      <td>26.67</td>\n",
       "      <td>28.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    HomeAvgSalary  HomeValue  HomeStrength  AwayAvgSalary  AwayValue  \\\n",
       "80           2.62     147.83            76           3.51     239.04   \n",
       "81           1.26      85.64            73           2.27     223.43   \n",
       "82           6.60     787.28            83           8.60     769.50   \n",
       "83           1.63     104.49            75           6.40     801.90   \n",
       "84           7.89     953.55            85           2.11     169.43   \n",
       "\n",
       "    AwayStrength  AvgHomeShotsHomeLast4  AvgHomeShotsHomeLast5  \\\n",
       "80            77                   10.5                  10.50   \n",
       "81            76                   10.5                  11.67   \n",
       "82            83                   14.0                  17.33   \n",
       "83            83                   12.0                  12.00   \n",
       "84            78                   28.0                  26.67   \n",
       "\n",
       "    AvgHomeShotsHomeLast6  AvgHomeShotsHomeLast7          ...           \\\n",
       "80                  12.67                  12.67          ...            \n",
       "81                  11.67                  11.75          ...            \n",
       "82                  17.33                  19.00          ...            \n",
       "83                   9.67                   9.67          ...            \n",
       "84                  26.67                  28.00          ...            \n",
       "\n",
       "    AvgHomeConcededLast4  AvgHomeConcededLast5  AvgHomeConcededLast6  \\\n",
       "80                   1.5                  1.50                  1.67   \n",
       "81                   3.5                  3.33                  3.33   \n",
       "82                   1.0                  0.67                  0.67   \n",
       "83                   1.5                  1.50                  1.00   \n",
       "84                   0.0                  0.33                  0.33   \n",
       "\n",
       "    AvgHomeConcededLast7  AvgHomeConcededLast8  AvgAwayConcededLast4  \\\n",
       "80                  1.67                  1.25                   2.5   \n",
       "81                  2.50                  2.50                   3.0   \n",
       "82                  1.00                  1.00                   2.0   \n",
       "83                  1.00                  1.50                   1.0   \n",
       "84                  0.50                  0.50                   1.0   \n",
       "\n",
       "    AvgAwayConcededLast5  AvgAwayConcededLast6  AvgAwayConcededLast7  \\\n",
       "80                  1.67                  1.67                  1.75   \n",
       "81                  2.67                  2.67                  2.75   \n",
       "82                  1.33                  1.33                  1.75   \n",
       "83                  1.00                  1.00                  0.75   \n",
       "84                  1.00                  2.00                  2.00   \n",
       "\n",
       "    AvgAwayConcededLast8  \n",
       "80                  1.75  \n",
       "81                  2.75  \n",
       "82                  1.75  \n",
       "83                  0.75  \n",
       "84                  1.50  \n",
       "\n",
       "[5 rows x 56 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#spliting into target variable for training data set(Y_fs), target variable for the validation data set(y_test), input layer for training data set(x_fs), input layer for validation data set(x-test)\n",
    "\n",
    "y_fs = y.iloc[:200]\n",
    "y_test = y.iloc[200:]\n",
    "x_fs = x.iloc[:200]\n",
    "x_test = x.iloc[200:]\n",
    "\n",
    "#setting up PCA-reduced data set \n",
    "pca = PCA(n_components=8)\n",
    "x_fs_pca=pca.fit_transform(x_fs)\n",
    "x_test_pca=pca.fit_transform(x_test)\n",
    "\n",
    "\n",
    "x_fs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 4.65930877e-03,  6.69513053e-01,  7.85485805e-03,\n",
       "        -5.40845281e-03, -7.42471950e-01, -8.35740377e-03,\n",
       "         5.68064536e-03,  4.80736896e-03,  5.02224255e-03,\n",
       "         4.18932387e-03,  4.17653998e-03, -5.14371896e-03,\n",
       "        -4.72863107e-03, -5.05843482e-03, -5.47577940e-03,\n",
       "        -5.20311316e-03,  1.32998727e-03,  1.31296506e-03,\n",
       "         1.40294685e-03,  1.36934516e-03,  1.34499420e-03,\n",
       "        -6.83304153e-04, -8.60745311e-04, -8.37817746e-04,\n",
       "        -8.27375248e-04, -7.52303319e-04,  1.19339279e-03,\n",
       "         1.01547776e-03,  1.08121963e-03,  1.04743977e-03,\n",
       "         1.09655641e-03, -2.08519520e-05, -3.92210192e-05,\n",
       "        -7.86237779e-06, -5.37888529e-05,  1.86934566e-05,\n",
       "         2.13620127e-03,  1.98673976e-03,  2.06390569e-03,\n",
       "         1.82896481e-03,  2.01437520e-03, -1.48518097e-03,\n",
       "        -1.42595900e-03, -1.23832953e-03, -1.59518520e-03,\n",
       "        -1.60426925e-03, -1.08640376e-03, -1.11022569e-03,\n",
       "        -1.10342837e-03, -1.09023301e-03, -1.08156664e-03,\n",
       "         8.26965143e-04,  7.65133242e-04,  7.68041369e-04,\n",
       "         7.03057762e-04,  6.85530039e-04],\n",
       "       [ 5.21671290e-03,  7.42446876e-01,  7.99402582e-03,\n",
       "         4.52059306e-03,  6.69499621e-01,  8.09733224e-03,\n",
       "         4.82227626e-03,  5.06558279e-03,  4.81245440e-03,\n",
       "         5.59130082e-03,  5.67736884e-03,  6.32729349e-03,\n",
       "         5.87259991e-03,  5.91918880e-03,  5.01147649e-03,\n",
       "         4.70299753e-03,  1.44806387e-03,  1.10755992e-03,\n",
       "         1.10094962e-03,  8.80562664e-04,  9.84722492e-04,\n",
       "         6.93670351e-04,  6.67127594e-04,  8.69261571e-04,\n",
       "         9.08853679e-04,  6.80008044e-04,  1.17709221e-03,\n",
       "         1.08302851e-03,  1.06600712e-03,  1.00160905e-03,\n",
       "         1.15673781e-03,  9.06047921e-05,  2.34060012e-04,\n",
       "         2.98438936e-04,  2.44077556e-04,  1.48598852e-04,\n",
       "         3.24599708e-03,  2.96031767e-03,  2.79185647e-03,\n",
       "         2.85289747e-03,  2.78152169e-03,  1.10609258e-03,\n",
       "         1.53346479e-03,  1.53133795e-03,  1.35806132e-03,\n",
       "         1.24769386e-03, -1.09688224e-03, -7.09590681e-04,\n",
       "        -7.37759823e-04, -4.81885780e-04, -5.16412841e-04,\n",
       "        -6.70201955e-04, -5.96739925e-04, -8.67523725e-04,\n",
       "        -8.49647991e-04, -7.54634574e-04],\n",
       "       [ 2.95808159e-02,  1.72485797e-02,  5.86811056e-03,\n",
       "         7.34177563e-03, -6.11868946e-04,  2.36935510e-03,\n",
       "        -4.90099563e-01, -4.62747164e-01, -4.32917273e-01,\n",
       "        -3.88839367e-01, -3.51779949e-01,  6.39903337e-02,\n",
       "        -5.56171039e-03, -1.57726539e-02,  3.29470141e-03,\n",
       "        -8.06539772e-03, -2.64368532e-02, -2.91722253e-02,\n",
       "        -2.52763772e-02, -2.43619912e-02, -2.18114275e-02,\n",
       "         1.29504228e-03,  8.68758803e-03,  6.78004441e-03,\n",
       "         1.05710495e-02,  1.05794554e-02, -2.69844900e-02,\n",
       "        -2.82329946e-02, -2.63168804e-02, -2.14867558e-02,\n",
       "        -2.26916386e-02, -4.20669706e-03,  1.05671404e-04,\n",
       "        -8.49675222e-04,  1.75711501e-03,  3.18095308e-03,\n",
       "        -1.26506599e-01, -1.27479840e-01, -1.19849080e-01,\n",
       "        -1.09797434e-01, -1.03978667e-01,  2.02465737e-02,\n",
       "         4.63019133e-03, -1.24850141e-03,  1.29835216e-02,\n",
       "         9.22515272e-03,  1.07780474e-02,  1.09248279e-02,\n",
       "         8.45893918e-03,  9.73831991e-03,  7.11465660e-03,\n",
       "         7.46348428e-03, -9.90121133e-06, -3.71368177e-03,\n",
       "        -4.68824234e-03, -6.34781467e-03],\n",
       "       [-7.44538374e-03, -2.10360126e-03, -4.65756551e-03,\n",
       "        -9.24568773e-03, -1.67433592e-02, -3.77573522e-02,\n",
       "         1.65376982e-02,  1.08386337e-02, -1.20756093e-03,\n",
       "         2.23326164e-02,  3.91742436e-02,  5.36538265e-01,\n",
       "         4.40041297e-01,  4.26039581e-01,  3.31215280e-01,\n",
       "         3.15649982e-01,  1.52979445e-02, -2.94558287e-04,\n",
       "        -2.14024834e-03, -6.19019896e-03, -2.35267741e-04,\n",
       "         5.37548026e-02,  4.23492798e-02,  4.43154159e-02,\n",
       "         3.18782746e-02,  3.04951699e-02,  2.81451339e-03,\n",
       "        -5.78503527e-03, -4.05480962e-03, -4.76527937e-03,\n",
       "        -3.55576190e-03,  5.13097508e-02,  4.29800303e-02,\n",
       "         4.03207358e-02,  3.19085249e-02,  3.19124219e-02,\n",
       "        -1.36428354e-02, -1.09922291e-02, -6.94614963e-03,\n",
       "        -4.86463459e-04,  4.53581604e-03,  1.82933689e-01,\n",
       "         1.48680604e-01,  1.46317938e-01,  1.23918601e-01,\n",
       "         1.15468747e-01, -8.55794908e-03, -2.19333474e-04,\n",
       "        -3.63085231e-03,  3.53069124e-03,  2.73700334e-03,\n",
       "        -2.59605096e-03,  3.19131754e-03, -1.76589097e-03,\n",
       "         6.94725077e-03,  4.30675074e-03],\n",
       "       [ 2.33600013e-02, -4.04428446e-03,  4.53622054e-02,\n",
       "         8.30319762e-02, -2.09585830e-03,  7.19312877e-02,\n",
       "        -2.31638576e-01, -9.31773381e-02, -1.81399434e-02,\n",
       "         7.27506626e-02,  1.33823039e-01, -8.66926821e-02,\n",
       "        -2.62428995e-02, -1.00171690e-01, -9.28654790e-02,\n",
       "        -9.46642031e-02,  1.34801432e-01,  1.24017859e-01,\n",
       "         1.30095154e-01,  1.18481388e-01,  1.20286432e-01,\n",
       "         2.43506316e-01,  2.44455012e-01,  2.21967519e-01,\n",
       "         2.06762370e-01,  2.00865732e-01,  8.63328364e-02,\n",
       "         7.90614593e-02,  7.24350464e-02,  8.54149868e-02,\n",
       "         7.92486974e-02,  2.02428305e-01,  1.93146043e-01,\n",
       "         1.85137572e-01,  1.82041935e-01,  1.65304897e-01,\n",
       "         9.61673586e-02,  1.01831509e-01,  1.24355665e-01,\n",
       "         1.47760966e-01,  1.44531322e-01,  1.40903114e-01,\n",
       "         1.30898451e-01,  1.07086029e-01,  9.90886075e-02,\n",
       "         8.94438587e-02, -1.01640155e-01, -1.06141981e-01,\n",
       "        -9.89626258e-02, -7.82969655e-02, -7.30704749e-02,\n",
       "        -1.93869240e-01, -1.83923476e-01, -1.62744770e-01,\n",
       "        -1.46584980e-01, -1.46064030e-01],\n",
       "       [-1.19144780e-02,  4.57524425e-03, -5.27713328e-02,\n",
       "         8.60823010e-03, -1.20773375e-04, -2.00294837e-02,\n",
       "        -2.17230392e-01, -8.39363681e-03,  1.88668166e-01,\n",
       "         2.38673605e-01,  3.53789401e-01, -1.19101265e-01,\n",
       "        -5.75140228e-02, -2.56839201e-02,  8.29403909e-03,\n",
       "        -1.52176786e-02, -2.02933647e-01, -1.72633292e-01,\n",
       "        -1.48569691e-01, -1.21494798e-01, -1.18973567e-01,\n",
       "         9.87567822e-02,  9.60003489e-02,  9.17880191e-02,\n",
       "         8.00041999e-02,  6.78252343e-02, -1.78300867e-01,\n",
       "        -1.36879297e-01, -1.20642161e-01, -1.02403416e-01,\n",
       "        -9.34136545e-02,  3.20929992e-02,  4.55178685e-02,\n",
       "         4.77261834e-02,  3.47417768e-02,  3.55563597e-02,\n",
       "        -3.77948626e-01, -2.88186509e-01, -2.33804079e-01,\n",
       "        -1.85492880e-01, -1.39536590e-01,  6.55071853e-02,\n",
       "         7.95634456e-02,  7.94294089e-02,  8.03807533e-02,\n",
       "         6.27367523e-02,  1.49441341e-01,  1.45152588e-01,\n",
       "         1.30544034e-01,  1.00938507e-01,  1.04695984e-01,\n",
       "        -7.45338414e-02, -6.23629923e-02, -5.69210140e-02,\n",
       "        -5.08975076e-02, -4.45941121e-02],\n",
       "       [-2.53910521e-02,  1.82864367e-03, -5.38104292e-02,\n",
       "         6.26832762e-02,  6.04453241e-04,  1.40985124e-01,\n",
       "         3.87056683e-01,  3.40491175e-02, -3.88857848e-02,\n",
       "        -1.78287271e-01, -1.27934735e-01,  4.18038948e-01,\n",
       "        -1.87623848e-01, -2.61749168e-01, -3.00188205e-01,\n",
       "        -2.45353031e-01, -4.59467146e-02, -6.71975977e-02,\n",
       "        -8.67822488e-02, -6.74429190e-02, -5.42860873e-02,\n",
       "         2.58358609e-02,  2.56579711e-02,  1.40330191e-02,\n",
       "         5.35869182e-03,  2.97005672e-03, -4.99511171e-02,\n",
       "        -8.13446943e-02, -1.04707291e-01, -1.02226782e-01,\n",
       "        -8.34005592e-02,  1.04517855e-01,  8.78561292e-02,\n",
       "         8.06150458e-02,  5.41433746e-02,  5.04702792e-02,\n",
       "         1.08347626e-01, -2.64768889e-02, -3.95056368e-02,\n",
       "        -7.32732538e-02, -7.56970537e-02,  3.83180981e-01,\n",
       "         1.82566022e-01,  1.31796733e-01,  7.38615697e-02,\n",
       "         8.57430726e-02,  8.29556914e-02,  6.21057675e-02,\n",
       "         5.24554691e-02,  2.56144696e-02,  1.49894743e-02,\n",
       "         2.36444208e-02,  3.91165073e-03,  2.19794928e-02,\n",
       "         2.71866064e-02,  1.76116981e-02],\n",
       "       [ 1.86530603e-02, -2.99972945e-03,  2.14275002e-02,\n",
       "         7.71764004e-02, -8.46586416e-04,  6.87616452e-02,\n",
       "        -3.76966137e-01, -8.44507147e-03,  8.73266090e-02,\n",
       "         2.52426208e-01,  2.14926569e-01,  5.91839176e-01,\n",
       "        -3.44797778e-02, -1.17393746e-01, -1.59183370e-01,\n",
       "        -2.79525304e-01,  4.23311640e-02,  4.22128571e-02,\n",
       "         5.14206416e-02,  5.55042094e-02,  6.99792384e-02,\n",
       "        -1.41446039e-01, -7.80435249e-02, -7.64299453e-02,\n",
       "        -7.40040364e-02, -6.08346332e-02,  2.17650343e-03,\n",
       "         1.58434738e-02,  3.71762540e-02,  4.54621407e-02,\n",
       "         5.31453429e-02, -1.70977048e-01, -1.26445855e-01,\n",
       "        -1.18191050e-01, -1.13558987e-01, -9.39931936e-02,\n",
       "        -7.06224492e-02, -3.44985813e-02, -8.29956985e-04,\n",
       "         6.58213951e-02,  6.95692028e-02, -1.22449395e-02,\n",
       "        -1.40017840e-01, -1.30651634e-01, -1.31235117e-01,\n",
       "        -1.22387694e-01, -6.19217741e-02, -6.24799183e-02,\n",
       "        -6.33147514e-02, -7.04556754e-02, -6.58919977e-02,\n",
       "        -5.21566647e-02, -5.43559629e-02, -6.02802653e-02,\n",
       "        -3.22001792e-02, -3.91222028e-02]])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.49"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of home wins in training data set\n",
    "homewins=np.count_nonzero(y_test == 1)/(len(y_test))\n",
    "homewins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.34"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of away wins in training data set\n",
    "awaywins=np.count_nonzero(y_test == 2)/(len(y_test))\n",
    "awaywins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.49"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of home wins in validation data set\n",
    "homewins=np.count_nonzero(y_fs == 1)/(len(y_fs))\n",
    "homewins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.32"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of away wins in validation data set\n",
    "awaywins=np.count_nonzero(y_fs == 2)/(len(y_fs))\n",
    "awaywins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.19"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#percentage of draws in validation data set\n",
    "draws=1-homewins-awaywins\n",
    "draws"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# models target variable home win/ draw/ away win "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lda: 0.46349206349206346\n",
      "logit: 0.5244444444444444\n",
      "gbr: 0.503968253968254\n",
      "rfc: 0.5534126984126984\n"
     ]
    }
   ],
   "source": [
    "#prediction \n",
    "\n",
    "# linear discriminate analysis full model\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "lda = LinearDiscriminantAnalysis()\n",
    "lda_p = cross_val_score(lda, x_fs, y_fs, cv=10)\n",
    "print('lda: ' + str(lda_p.sum()/10))\n",
    "\n",
    "# logit full model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logit = LogisticRegression()\n",
    "logit_p = cross_val_score(logit, x_fs, y_fs, cv=10)\n",
    "print('logit: ' + str(logit_p.sum()/10))\n",
    "\n",
    "#gba full model\n",
    "from sklearn import ensemble\n",
    "gbr = ensemble.GradientBoostingClassifier()\n",
    "gbr_p = cross_val_score(gbr, x_fs, y_fs, cv=10)\n",
    "print('gbr: ' + str(gbr_p.sum()/10))\n",
    "\n",
    "#random forest full model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier( max_depth=5,random_state=10)\n",
    "rfc_p = cross_val_score(rfc, x_fs, y_fs, cv=10)\n",
    "print('rfc: ' + str(rfc_p.sum()/10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lda_pca: 0.5800793650793651\n",
      "logit_pca: 0.5703174603174602\n",
      "gbr_pca: 0.5367460317460317\n",
      "rfc_pca: 0.5755555555555555\n"
     ]
    }
   ],
   "source": [
    "# linear discriminate analysis pca-reduced model\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "lda = LinearDiscriminantAnalysis()\n",
    "lda_p= cross_val_score(lda, x_fs_pca, y_fs, cv=10)\n",
    "print('lda_pca: ' + str(lda_p.sum()/10))\n",
    "\n",
    "# logit full model pca-reduced model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logit = LogisticRegression()\n",
    "logit_p = cross_val_score(logit, x_fs_pca, y_fs, cv=10)\n",
    "print('logit_pca: ' + str(logit_p.sum()/10))\n",
    "\n",
    "#gba pca-reduced model\n",
    "from sklearn import ensemble\n",
    "gbr = ensemble.GradientBoostingClassifier()\n",
    "gbr_p = cross_val_score(gbr, x_fs_pca, y_fs, cv=10)\n",
    "print('gbr_pca: ' + str(gbr_p.sum()/10))\n",
    "\n",
    "#random forest pca-reduced model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier( max_depth=5,random_state=10)\n",
    "rfc_p = cross_val_score(rfc, x_fs_pca, y_fs, cv=10)\n",
    "print('rfc_pca: ' + str(rfc_p.sum()/10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature ranking:\n",
      "1. feature 6 (0.048074)\n",
      "2. feature 2 (0.044389)\n",
      "3. feature 1 (0.040176)\n",
      "4. feature 55 (0.036305)\n",
      "5. feature 0 (0.035402)\n",
      "6. feature 38 (0.032901)\n",
      "7. feature 9 (0.032335)\n",
      "8. feature 34 (0.028932)\n",
      "9. feature 53 (0.028894)\n",
      "10. feature 50 (0.028447)\n",
      "11. feature 4 (0.028138)\n",
      "12. feature 24 (0.027475)\n",
      "13. feature 36 (0.027033)\n",
      "14. feature 5 (0.026382)\n",
      "15. feature 12 (0.026186)\n",
      "16. feature 14 (0.025565)\n",
      "17. feature 15 (0.024564)\n",
      "18. feature 39 (0.023007)\n",
      "19. feature 28 (0.021728)\n",
      "20. feature 7 (0.021403)\n",
      "21. feature 22 (0.021028)\n",
      "22. feature 43 (0.020215)\n",
      "23. feature 42 (0.019617)\n",
      "24. feature 49 (0.019487)\n",
      "25. feature 11 (0.019288)\n",
      "26. feature 3 (0.018365)\n",
      "27. feature 27 (0.017244)\n",
      "28. feature 54 (0.016646)\n",
      "29. feature 10 (0.014141)\n",
      "30. feature 41 (0.013874)\n",
      "31. feature 21 (0.013815)\n",
      "32. feature 35 (0.013379)\n",
      "33. feature 19 (0.012955)\n",
      "34. feature 25 (0.012824)\n",
      "35. feature 13 (0.011169)\n",
      "36. feature 33 (0.011000)\n",
      "37. feature 37 (0.009967)\n",
      "38. feature 8 (0.009913)\n",
      "39. feature 30 (0.009857)\n",
      "40. feature 52 (0.009759)\n",
      "41. feature 46 (0.009714)\n",
      "42. feature 26 (0.009711)\n",
      "43. feature 20 (0.008587)\n",
      "44. feature 17 (0.008516)\n",
      "45. feature 16 (0.007972)\n",
      "46. feature 40 (0.007722)\n",
      "47. feature 51 (0.006933)\n",
      "48. feature 18 (0.006908)\n",
      "49. feature 31 (0.006534)\n",
      "50. feature 45 (0.005064)\n",
      "51. feature 23 (0.004705)\n",
      "52. feature 47 (0.003838)\n",
      "53. feature 44 (0.003699)\n",
      "54. feature 29 (0.003395)\n",
      "55. feature 32 (0.002548)\n",
      "56. feature 48 (0.002276)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#feature ranking random forest\n",
    "rfc2=rfc.fit(x_fs, y_fs)\n",
    "importances = rfc2.feature_importances_\n",
    "std = np.std([rfc2.feature_importances_ for tree in rfc2.estimators_],\n",
    "             axis=0)\n",
    "indices = np.argsort(importances)[::-1]\n",
    "\n",
    "# Print the feature ranking\n",
    "print(\"Feature ranking:\")\n",
    "\n",
    "for f in range(x_fs.shape[1]):\n",
    "    print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n",
    "\n",
    "# Plot the feature importances of the forest\n",
    "plt.figure()\n",
    "plt.title(\"Feature importances\")\n",
    "plt.bar(range(x_fs.shape[1]), importances[indices],\n",
    "       color=\"r\", yerr=std[indices], align=\"center\")\n",
    "plt.xticks(range(x_fs.shape[1]), indices)\n",
    "plt.xlim([-1, x_fs.shape[1]])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.03540232, 0.04017582, 0.04438912, 0.01836524, 0.02813773,\n",
       "       0.02638201, 0.04807363, 0.02140286, 0.00991295, 0.03233549,\n",
       "       0.01414105, 0.01928775, 0.02618611, 0.01116927, 0.02556468,\n",
       "       0.02456381, 0.00797152, 0.00851589, 0.00690777, 0.01295529,\n",
       "       0.008587  , 0.01381537, 0.02102805, 0.00470476, 0.02747482,\n",
       "       0.01282379, 0.00971113, 0.01724406, 0.02172796, 0.00339495,\n",
       "       0.0098573 , 0.0065338 , 0.00254804, 0.01099952, 0.02893193,\n",
       "       0.01337883, 0.02703324, 0.00996749, 0.03290067, 0.02300673,\n",
       "       0.00772189, 0.01387445, 0.01961673, 0.02021532, 0.00369891,\n",
       "       0.00506439, 0.0097135 , 0.00383764, 0.00227567, 0.01948747,\n",
       "       0.02844748, 0.00693292, 0.00975912, 0.02889357, 0.01664577,\n",
       "       0.03630539])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importances"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# prepare betting odds of bet365 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy bet365: 0.595\n"
     ]
    }
   ],
   "source": [
    "#test accuracy of their odds\n",
    "prediction365=[]\n",
    "for e in range(0,380):\n",
    "    if odds.iloc[e][0]<odds.iloc[e][1] and odds.iloc[e][0]<odds.iloc[e][2]:\n",
    "        prediction365.append(1)\n",
    "    elif odds.iloc[e][2]<odds.iloc[e][1] and odds.iloc[e][2]<odds.iloc[e][0]:\n",
    "        prediction365.append(2)\n",
    "    else:\n",
    "        prediction365.append(0)\n",
    "prediction365_2=prediction365[80:280]\n",
    "prediction365_3=prediction365[280:]\n",
    "y_fs = y.iloc[:200]\n",
    "print('Accuracy bet365: '+ str(accuracy_score(prediction365_2, y_fs)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predict probailities for each match's outcome with all four different techniques\n",
    "\n",
    "#lda with pca probability prediction\n",
    "lda_pca_p= cross_val_predict(lda, x_fs_pca, y_fs, cv=10,method='predict_proba')\n",
    "#rfc with pca probability prediction\n",
    "rfc_pca_p= cross_val_predict(rfc, x_fs_pca, y_fs, cv=10,method='predict_proba')\n",
    "#logit with pca probability prediction\n",
    "logit_pca_p= cross_val_predict(logit, x_fs_pca, y_fs, cv=10,method='predict_proba')\n",
    "#gbr probability prediction\n",
    "gbr_pca_p= cross_val_predict(gbr, x_fs_pca, y_fs, cv=10,method='predict_proba')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#devide odds into the odds for the training data set and the odds for the validation data set\n",
    "odds2=odds.iloc[80:280,:]\n",
    "odds3=odds.iloc[280:,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#the function places a bet of one on outcomes that exceed a given probability and does not bet on all other predicted match outcomes\n",
    "def strat(t,m):\n",
    "    bettingstrategy=[]\n",
    "    for e in m:\n",
    "        if e[1]>t:\n",
    "            bettingstrategy.append(1)\n",
    "        elif e[2]>t:\n",
    "            bettingstrategy.append(2)\n",
    "        else:\n",
    "            bettingstrategy.append('-')\n",
    "    return(bettingstrategy)\n",
    "#in this function, the placed bets are reconciled with the effective outcome. In case of a match between the bet and the outcome, the odds for the outcome are multiplied by the betting amount of one and noted as a win. returns the total amount lost or won\n",
    "def res(bettingstrategy, odds,y):  \n",
    "    results=[]\n",
    "    invest=0\n",
    "    for i,e in enumerate(bettingstrategy):\n",
    "        if e==1 :\n",
    "            invest=invest+1\n",
    "            if y.iloc[i]==1:\n",
    "                results.append(1*odds.iloc[i][0])\n",
    "            else:\n",
    "                results.append(-1)\n",
    "        if e==2:\n",
    "            invest=invest+1\n",
    "            if y.iloc[i]==2:\n",
    "                results.append(1*odds.iloc[i][2])\n",
    "            else:\n",
    "                results.append(-1)       \n",
    "        if e==0 :\n",
    "            invest=invest+1\n",
    "            if y.iloc[i]==0:\n",
    "                results.append(1*odds.iloc[i][1])\n",
    "            else:\n",
    "                results.append(-1) \n",
    "        else:\n",
    "            results.append(0) \n",
    "    return(results)\n",
    "#in this function, the placed bets are reconciled with the effective outcome. In case of a match between the bet and the outcome, the odds for the outcome are multiplied by the betting amount of one and noted as a win. returns the total betting amount \n",
    "def res2(bettingstrategy, odds,y):  \n",
    "    results=[]\n",
    "    invest=0\n",
    "    for i,e in enumerate(bettingstrategy):\n",
    "        if e==1 :\n",
    "            invest=invest+1\n",
    "            if y.iloc[i]==1:\n",
    "                results.append(1*odds.iloc[i][0])\n",
    "            else:\n",
    "                results.append(-1)\n",
    "        if e==2 :\n",
    "            invest=invest+1\n",
    "            if y.iloc[i]==2:\n",
    "                results.append(1*odds.iloc[i][2])\n",
    "            else:\n",
    "                results.append(-1)       \n",
    "        if e==0 :\n",
    "            invest=invest+1\n",
    "            if y.iloc[i]==0:\n",
    "                results.append(1*odds.iloc[i][1])\n",
    "            else:\n",
    "                results.append(-1) \n",
    "        else:\n",
    "            results.append(0) \n",
    "    return(invest)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function collects the sum of wins and losses as well as the total betting amount for each probability threshold between 0.5 to 1 in steps of 0.01\n",
    "def output1(model, odds, target):\n",
    "    roi=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2(strat(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res(strat(e,model), odds, target))))-(res2(strat(e,model), odds,target)))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "    return(roi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function graphs the return on investment for each probability threshold between 0.5 to 1 in steps of 0.01\n",
    "def output_graph(model, odds, target):\n",
    "    roi=[]\n",
    "    bets=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2(strat(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res(strat(e,model), odds, target))))-(res2(strat(e,model), odds,target)))\n",
    "            bets.append(res2(strat(e,model), odds,target))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "            bets.append(0)\n",
    "    t=[]\n",
    "    for e in range (0,51):\n",
    "        t.append(0)\n",
    "    \n",
    "    roi=t+roi\n",
    "\n",
    "    plt.plot(roi, lw=3)\n",
    "    plt.axis([51,100,-40,10])\n",
    "    plt.axhline(y=0, color='r', linestyle='-', lw=3)\n",
    "    plt.ylabel('Profit')\n",
    "    plt.xlabel('Cutoff')\n",
    "    plt.show()\n",
    "    plt.rc('font', size=19)          # controls default text sizes\n",
    "    plt.rc('axes', titlesize=19)     # fontsize of the axes title\n",
    "    plt.rc('axes', labelsize=19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function evaluates the probability threshold (cutoff value) with the highest ROI, defined as the sum of wins and losses plus the betting amount divided by the betting amount and shows the corresponding number of bets,roi and cutoff value\n",
    "def output_new(model, odds, target):\n",
    "    roi=[]\n",
    "    bets=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2(strat(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res(strat(e,model), odds, target))))-(res2(strat(e,model), odds,target)))\n",
    "            bets.append(res2(strat(e,model), odds,target))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "            bets.append(0)\n",
    "            \n",
    "    a=round(max(roi),2)\n",
    "    b=bets[roi.index(max(roi))]\n",
    "    print('max bets profit: ' + str(a), '      cutoff: ' + str((roi.index(max(roi)))+50),  '        bets: ' + str(b),  '        roi: ' + str((((a+b)*100)/b)-100)+ '%')    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#output Lda for lasso reduced data set\n",
    "output_graph(lda_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 2.39       cutoff: 78         bets: 8         roi: 29.875%\n"
     ]
    }
   ],
   "source": [
    "output_new(lda_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#output random forest for lasso reduced data set\n",
    "output_graph(rfc_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 0.57       cutoff: 96         bets: 1         roi: 56.99999999999997%\n"
     ]
    }
   ],
   "source": [
    "output_new(rfc_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#output logit for lasso reduced data set\n",
    "output_graph(logit_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 3.11       cutoff: 84         bets: 10         roi: 31.099999999999994%\n"
     ]
    }
   ],
   "source": [
    "output_new(logit_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##output gradient boosting for lasso reduced data set\n",
    "output_graph(gbr_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 0.41       cutoff: 99         bets: 2         roi: 20.5%\n"
     ]
    }
   ],
   "source": [
    "output_new(gbr_pca_p, odds2, y_fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function gets out of sample performance (validation data set) with training set determined machine learning technique its is corresponding cutoff threshold\n",
    "def output_vali(model, odds, target, e):\n",
    "    e=e/100\n",
    "    if res2(strat(e,model), odds,target) !=0:\n",
    "        roi =(((sum(res(strat(e,model), odds, target))))-(res2(strat(e,model), odds,target)))\n",
    "        bets=(res2(strat(e,model), odds,target))\n",
    "    else:\n",
    "        roi= 0\n",
    "        bets=0\n",
    "            \n",
    "    a=roi\n",
    "    b=bets\n",
    "    print('max bets profit: ' + str(a), '      cutoff: ' + str(e),  '        bets: ' + str(b),  '        roi: ' + str((((a+b)*100)/b)-100)+ '%')    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "#logit out of sample test (validation dat set)\n",
    "logit.fit(x_fs_pca,y_fs)\n",
    "logit_pca_vali = logit.predict_proba(x_test_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 0.5199999999999996       cutoff: 0.84         bets: 3         roi: 17.333333333333314%\n"
     ]
    }
   ],
   "source": [
    "output_vali(logit_pca_vali, odds3, y_test,84 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## home win/ no home win as target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create y variable with new outcome\n",
    "y_fs_h=[]\n",
    "for e in y_fs:\n",
    "    if e == 1:\n",
    "        y_fs_h.append(1)\n",
    "    else:\n",
    "        y_fs_h.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lda: 0.5730701754385964\n",
      "logit: 0.614172932330827\n",
      "gbr: 0.579812030075188\n",
      "rfc: 0.6449874686716792\n"
     ]
    }
   ],
   "source": [
    "#accuracies\n",
    "# linear discriminate analysis full model\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "lda = LinearDiscriminantAnalysis()\n",
    "lda_p_h = cross_val_score(lda, x_fs, y_fs_h, cv=10)\n",
    "print('lda: ' + str(lda_p_h.sum()/10))\n",
    "\n",
    "# logit full model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logit = LogisticRegression()\n",
    "logit_p_h = cross_val_score(logit, x_fs, y_fs_h, cv=10)\n",
    "print('logit: ' + str(logit_p_h.sum()/10))\n",
    "\n",
    "#gba  full model\n",
    "from sklearn import ensemble\n",
    "gbr = ensemble.GradientBoostingClassifier()\n",
    "gbr_p_h = cross_val_score(gbr, x_fs, y_fs_h, cv=10)\n",
    "print('gbr: ' + str(gbr_p_h.sum()/10))\n",
    "\n",
    "#random forest  full model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier( max_depth=5,random_state=10)\n",
    "rfc_p_h = cross_val_score(rfc, x_fs, y_fs_h, cv=10)\n",
    "print('rfc: ' + str(rfc_p_h.sum()/10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lda_pca: 0.655438596491228\n",
      "logit_pca: 0.660438596491228\n",
      "gbr_pca: 0.5801002506265664\n",
      "rfc_pca: 0.5896240601503759\n"
     ]
    }
   ],
   "source": [
    "#accuracies\n",
    "# linear discriminate analysis pca-reduced model\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "lda = LinearDiscriminantAnalysis()\n",
    "lda_p = cross_val_score(lda, x_fs_pca, y_fs_h, cv=10)\n",
    "print('lda_pca: ' + str(lda_p.sum()/10))\n",
    "\n",
    "# logit full model pca-reduced model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logit = LogisticRegression()\n",
    "logit_p = cross_val_score(logit, x_fs_pca, y_fs_h, cv=10)\n",
    "print('logit_pca: ' + str(logit_p.sum()/10))\n",
    "\n",
    "#gbapca-reduced model\n",
    "from sklearn import ensemble\n",
    "gbr = ensemble.GradientBoostingClassifier()\n",
    "gbr_p = cross_val_score(gbr, x_fs_pca, y_fs_h, cv=10)\n",
    "print('gbr_pca: ' + str(gbr_p.sum()/10))\n",
    "\n",
    "#random forest pca-reduced model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier( max_depth=5,random_state=10)\n",
    "rfc_p = cross_val_score(rfc, x_fs_pca, y_fs_h, cv=10)\n",
    "print('rfc_pca: ' + str(rfc_p.sum()/10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.38"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#accuracy bet365\n",
    "prediction365_2=[]\n",
    "for e in range(0,380):\n",
    "    if odds.iloc[e][0]>odds.iloc[e][1] and odds.iloc[e][0]>odds.iloc[e][2]:\n",
    "        prediction365_2.append(1)\n",
    "    else:\n",
    "        prediction365_2.append(0)\n",
    "prediction365_2_2=prediction365_2[80:280]\n",
    "prediction365_3_2=prediction365_2[280:]\n",
    "accuracy_score(prediction365_2_2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "#strategy1\n",
    "logit_pca_p_h=cross_val_predict(logit, x_fs_pca, y_fs_h, cv=10, method='predict_proba')\n",
    "#strategy2\n",
    "lda_pca_p_h=cross_val_predict(lda, x_fs_pca, y_fs_h, cv=10, method='predict_proba')\n",
    "#strategy3\n",
    "rfc_p_h=cross_val_predict(rfc, x_fs, y_fs_h, cv=10, method='predict_proba')\n",
    "#strategy3\n",
    "gbr_p_h=cross_val_predict(gbr, x_fs, y_fs_h, cv=10, method='predict_proba')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "#the function places a bet of one on outcomes that exceed a given probability and does not bet on all other predicted match outcomes\n",
    "def strat_2(t,m):\n",
    "    bettingstrategy=[]\n",
    "    for e in m:\n",
    "        if e[1]>t:\n",
    "            bettingstrategy.append(1)\n",
    "        else:\n",
    "            bettingstrategy.append('-')\n",
    "    return(bettingstrategy)\n",
    "#in this function, the placed bets are reconciled with the effective outcome. In case of a match between the bet and the outcome, the odds for the outcome are multiplied by the betting amount of one and noted as a win. returns the total amount lost or won\n",
    "\n",
    "def res_2(bettingstrategy, odds,y):  \n",
    "    results=[]\n",
    "    invest=0\n",
    "    for i,e in enumerate(bettingstrategy):\n",
    "        if e==1:\n",
    "            invest=invest+1\n",
    "            if y[i]==1:\n",
    "                results.append(1*odds.iloc[i][0])\n",
    "            else:\n",
    "                results.append(-1)\n",
    "        else:\n",
    "            results.append(0) \n",
    "    return(results)\n",
    "#in this function, the placed bets are reconciled with the effective outcome. In case of a match between the bet and the outcome, the odds for the outcome are multiplied by the betting amount of one and noted as a win. returns the total betting amount        \n",
    "def res2_2(bettingstrategy,odds,y):  \n",
    "    results=[]\n",
    "    invest=0\n",
    "    for i,e in enumerate(bettingstrategy):\n",
    "        if e==1:\n",
    "            invest=invest+1\n",
    "            if y[i]==1:\n",
    "                results.append(1*odds.iloc[i][0])\n",
    "            else:\n",
    "                results.append(-1)\n",
    "        else:\n",
    "            results.append(0) \n",
    "    return(invest)     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function collects the sum of wins and losses as well as the total betting amount for each probability threshold between 0.5 to 1 in steps of 0.01\n",
    "def output_h(model, odds, target):\n",
    "    roi=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2_2(strat_2(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res_2(strat_2(e,model), odds, target))))-(res2_2(strat_2(e,model), odds,target)))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "    return(roi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function evaluates the probability threshold (cutoff value) with the highest ROI, defined as the sum of wins and losses plus the betting \n",
    "def output_new_h(model, odds, target):\n",
    "    roi=[]\n",
    "    bets=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2_2(strat_2(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res_2(strat_2(e,model), odds, target))))-(res2_2(strat_2(e,model), odds,target)))\n",
    "            bets.append(res2_2(strat_2(e,model), odds,target))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "            bets.append(0)\n",
    "            \n",
    "    a=round(max(roi),2)\n",
    "    b=bets[roi.index(max(roi))]\n",
    "    print('max bets profit: ' + str(a), '      cutoff: ' + str((roi.index(max(roi)))+50),  '        bets: ' + str(b),  '        roi: ' + str((((a+b)*100)/b)-100)+ '%')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function graphs the return on investment for each probability threshold between 0.5 to 1 in steps of 0.01\n",
    "def output_graph_h(model, odds, target):\n",
    "    roi=[]\n",
    "    bets=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2_2(strat_2(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res_2(strat_2(e,model), odds, target))))-(res2_2(strat_2(e,model), odds,target)))\n",
    "            bets.append(res2_2(strat_2(e,model), odds,target))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "            bets.append(0)\n",
    "\n",
    "    t=[]\n",
    "    for e in range (0,51):\n",
    "        t.append(0)\n",
    "    \n",
    "    roi=t+roi\n",
    "\n",
    "    plt.plot(roi, lw=3)\n",
    "    plt.axis([51,100,-40,10])\n",
    "    plt.axhline(y=0, color='r', linestyle='-', lw=3)\n",
    "    plt.ylabel('Profit')\n",
    "    plt.xlabel('Cutoff')\n",
    "    plt.show()\n",
    "    plt.rc('font', size=19)          # controls default text sizes\n",
    "    plt.rc('axes', titlesize=19)     # fontsize of the axes title\n",
    "    plt.rc('axes', labelsize=19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 1.18       cutoff: 90         bets: 5         roi: 23.599999999999994%\n"
     ]
    }
   ],
   "source": [
    "#output logit for lasso reduced data set\n",
    "output_new_h(logit_pca_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "output_graph_h(logit_pca_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 1.18       cutoff: 90         bets: 5         roi: 23.599999999999994%\n"
     ]
    }
   ],
   "source": [
    "#output lda for lasso reduced data set\n",
    "output_new_h(lda_pca_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "output_graph_h(lda_pca_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 1.3       cutoff: 86         bets: 8         roi: 16.250000000000014%\n"
     ]
    }
   ],
   "source": [
    "#output random forest for the full data set\n",
    "output_new_h(rfc_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "output_graph_h(rfc_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 1.1       cutoff: 98         bets: 4         roi: 27.499999999999986%\n"
     ]
    }
   ],
   "source": [
    "#output gradient boosting for the full data set\n",
    "output_new_h(gbr_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "output_graph_h(gbr_p_h, odds2, y_fs_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create y variable with new outcome for validation data set\n",
    "y_test_h=[]\n",
    "for e in y_test:\n",
    "    if e == 1:\n",
    "        y_test_h.append(1)\n",
    "    else:\n",
    "        y_test_h.append(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function gets out of sample performance (validation data set) with training set determined machine learning technique its is corresponding cutoff threshold\n",
    "def output_vali_h(model, odds, target, e):\n",
    "    e=e/100\n",
    "    if res2_2(strat_2(e,model), odds,target) !=0:\n",
    "        roi =(((sum(res_2(strat_2(e,model), odds, target))))-(res2_2(strat_2(e,model), odds,target)))\n",
    "        bets=(res2_2(strat_2(e,model), odds,target))\n",
    "    else:\n",
    "        roi= 0\n",
    "        bets=0\n",
    "            \n",
    "    a=roi\n",
    "    b=bets\n",
    "    print('max bets profit: ' + str(a), '      cutoff: ' + str(e),  '        bets: ' + str(b),  '        roi: ' + str((((a+b)*100)/b)-100)+ '%')    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#random forest out of sample test (validation dat set)\n",
    "rfc.fit(x_fs,y_fs_h)\n",
    "rfc_vali_h = rfc.predict_proba(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 0.29000000000000004       cutoff: 0.86         bets: 3         roi: 9.666666666666671%\n"
     ]
    }
   ],
   "source": [
    "output_vali_h(rfc_vali_h, odds3, y_test_h,86)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# away win/ no away win as target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set target variable for new outcome\n",
    "y_fs_a=[]\n",
    "for e in y_fs:\n",
    "    if e == 2:\n",
    "        y_fs_a.append(2)\n",
    "    else:\n",
    "        y_fs_a.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lda: 0.6831578947368422\n",
      "logit: 0.7395238095238095\n",
      "gbr: 0.6964035087719298\n",
      "rfc: 0.6706390977443609\n"
     ]
    }
   ],
   "source": [
    "#accuracies\n",
    "# linear discriminate analysis full model\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "lda = LinearDiscriminantAnalysis()\n",
    "lda_p_a = cross_val_score(lda, x_fs, y_fs_a, cv=10)\n",
    "print('lda: ' + str(lda_p_a.sum()/10))\n",
    "\n",
    "# logit full model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logit = LogisticRegression()\n",
    "logit_p_a = cross_val_score(logit, x_fs, y_fs_a, cv=10)\n",
    "print('logit: ' + str(logit_p_a.sum()/10))\n",
    "\n",
    "#gba full model\n",
    "from sklearn import ensemble\n",
    "gbr = ensemble.GradientBoostingClassifier()\n",
    "gbr_p_a = cross_val_score(gbr, x_fs, y_fs_a, cv=10)\n",
    "print('gbr: ' + str(gbr_p_a.sum()/10))\n",
    "\n",
    "#random forest full model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier( max_depth=5,random_state=10)\n",
    "rfc_p_a = cross_val_score(rfc, x_fs, y_fs_a, cv=10)\n",
    "print('rfc: ' + str(rfc_p_a.sum()/10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lda: 0.7647869674185463\n",
      "logit: 0.7502631578947369\n",
      "gbr: 0.7259774436090225\n",
      "rfc: 0.7199498746867168\n"
     ]
    }
   ],
   "source": [
    "# linear discriminate analysis pca-reduced model\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "lda = LinearDiscriminantAnalysis()\n",
    "lda_p_a = cross_val_score(lda, x_fs_pca, y_fs_a, cv=10)\n",
    "print('lda: ' + str(lda_p_a.sum()/10))\n",
    "\n",
    "# logit pca-reduced model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logit = LogisticRegression()\n",
    "logit_p_a = cross_val_score(logit, x_fs_pca, y_fs_a, cv=10)\n",
    "print('logit: ' + str(logit_p_a.sum()/10))\n",
    "\n",
    "#gba pca-reduced model\n",
    "from sklearn import ensemble\n",
    "gbr = ensemble.GradientBoostingClassifier()\n",
    "gbr_p_a = cross_val_score(gbr, x_fs_pca, y_fs_a, cv=10)\n",
    "print('gbr: ' + str(gbr_p_a.sum()/10))\n",
    "\n",
    "#random forest pca-reduced model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier( max_depth=5,random_state=10)\n",
    "rfc_p_a = cross_val_score(rfc, x_fs_pca, y_fs_a, cv=10)\n",
    "print('rfc: ' + str(rfc_p_a.sum()/10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "#startegy1 \n",
    "logit_pca_p_a=cross_val_predict(logit, x_fs_pca, y_fs_a, cv=10, method='predict_proba')\n",
    "#startegy2\n",
    "lda_pca_p_a=cross_val_predict(lda, x_fs_pca, y_fs_a, cv=10, method='predict_proba')\n",
    "#startegy3\n",
    "rfc_pca_p_a=cross_val_predict(rfc, x_fs_pca, y_fs_a, cv=10, method='predict_proba')\n",
    "#startegy3\n",
    "gbr_pca_p_a=cross_val_predict(gbr, x_fs_pca, y_fs_a, cv=10, method='predict_proba')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "#the function places a bet of one on outcomes that exceed a given probability and does not bet on all other predicted match outcomes\n",
    "def strat_a(t,m):\n",
    "    bettingstrategy=[]\n",
    "    for e in m:\n",
    "        if e[1]>t:\n",
    "            bettingstrategy.append(2)\n",
    "        else:\n",
    "            bettingstrategy.append('-')\n",
    "    return(bettingstrategy)\n",
    "\n",
    "#in this function, the placed bets are reconciled with the effective outcome. In case of a match between the bet and the outcome, the odds for the outcome are multiplied by the betting amount of one and noted as a win. returns the total amount lost or won\n",
    "def res_a(bettingstrategy, odds,y):  \n",
    "    results=[]\n",
    "    invest=0\n",
    "    for i,e in enumerate(bettingstrategy):\n",
    "        if e==2:\n",
    "            invest=invest+1\n",
    "            if y[i]==2 :\n",
    "                results.append(1*odds.iloc[i][2])\n",
    "            else:\n",
    "                results.append(-1)\n",
    "        else:\n",
    "            results.append(0) \n",
    "    return(results)\n",
    "#in this function, the placed bets are reconciled with the effective outcome. In case of a match between the bet and the outcome, the odds for the outcome are multiplied by the betting amount of one and noted as a win. returns the total betting amount             \n",
    "def res2_a(bettingstrategy,odds,y):  \n",
    "    results=[]\n",
    "    invest=0\n",
    "    for i,e in enumerate(bettingstrategy):\n",
    "        if e==2:\n",
    "            invest=invest+1\n",
    "            if y[i]==2:\n",
    "                results.append(1*odds.iloc[i][2])\n",
    "            else:\n",
    "                results.append(-1)\n",
    "        else:\n",
    "            results.append(0) \n",
    "    return(invest)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function collects the sum of wins and losses as well as the total betting amount for each probability threshold between 0.5 to 1 in steps of 0.01\n",
    "def output_new_a(model, odds, target):\n",
    "    roi=[]\n",
    "    bets=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2_a(strat_a(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res_a(strat_a(e,model), odds, target))))-(res2_a(strat_a(e,model), odds,target)))\n",
    "            bets.append(res2_a(strat_a(e,model), odds,target))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "            bets.append(0)\n",
    "            \n",
    "    a=round(max(roi),2)\n",
    "    b=bets[roi.index(max(roi))]\n",
    "    print('max bets profit: ' + str(a), '      cutoff: ' + str((roi.index(max(roi)))+50),  '        bets: ' + str(b),  '        roi: ' + str((((a+b)*100)/b)-100)+ '%')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function graphs the return on investment for each probability threshold between 0.5 to 1 in steps of 0.01\n",
    "def output_graph_a(model, odds, target):\n",
    "    roi=[]\n",
    "    bets=[]\n",
    "    for e in range(50,101):\n",
    "        e=e/100\n",
    "        if res2_a(strat_a(e,model), odds,target) !=0:\n",
    "            roi.append(((sum(res_a(strat_a(e,model), odds, target))))-(res2_a(strat_a(e,model), odds,target)))\n",
    "            bets.append(res2_a(strat_a(e,model), odds,target))\n",
    "        else:\n",
    "            roi.append(0)\n",
    "            bets.append(0)\n",
    "\n",
    "    t=[]\n",
    "    for e in range (0,51):\n",
    "        t.append(0)\n",
    "    \n",
    "    roi=t+roi\n",
    "\n",
    "    plt.plot(roi, lw=3)\n",
    "    plt.axis([51,100,-40,10])\n",
    "    plt.axhline(y=0, color='r', linestyle='-', lw=3)\n",
    "    plt.ylabel('Profit')\n",
    "    plt.xlabel('Cutoff')\n",
    "    plt.show()\n",
    "    plt.rc('font', size=19)          # controls default text sizes\n",
    "    plt.rc('axes', titlesize=19)     # fontsize of the axes title\n",
    "    plt.rc('axes', labelsize=19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 2.32       cutoff: 64         bets: 31         roi: 7.483870967741936%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#output logit for the pca-reduced model\n",
    "output_new_a(logit_pca_p_a, odds2,y_fs_a )\n",
    "output_graph_a(logit_pca_p_a, odds2,y_fs_a )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 1.71       cutoff: 68         bets: 30         roi: 5.700000000000003%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#output lda for the pca-reduced model\n",
    "output_new_a(lda_pca_p_a, odds2,y_fs_a )\n",
    "output_graph_a(lda_pca_p_a, odds2,y_fs_a )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 2.46       cutoff: 82         bets: 5         roi: 49.19999999999999%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#output random forest for the pca-reduced model\n",
    "output_new_a(rfc_pca_p_a, odds2,y_fs_a )\n",
    "output_graph_a(rfc_pca_p_a, odds2,y_fs_a )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#output gradient boosting for the pca-reduced model\n",
    "output_graph_a(gbr_pca_p_a, odds2,y_fs_a )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function gets out of sample performance (validation data set) with training set determined machine learning technique its is corresponding cutoff threshold\n",
    "def output_vali_a(model, odds, target, e):\n",
    "    e=e/100\n",
    "    if res2_h(strat_h(e,model), odds,target) !=0:\n",
    "        roi =(((sum(res_h(strat_h(e,model), odds, target))))-(res2_h(strat_2(e,model), odds,target)))\n",
    "        bets=(res2_h(strat_h(e,model), odds,target))\n",
    "    else:\n",
    "        roi= 0\n",
    "        bets=0\n",
    "            \n",
    "    a=roi\n",
    "    b=bets\n",
    "    print('max bets profit: ' + str(a), '      cutoff: ' + str(e),  '        bets: ' + str(b),  '        roi: ' + str((((a+b)*100)/b)-100)+ '%')    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create y variable with new outcome for validation data set\n",
    "y_test_a=[]\n",
    "for e in y_test:\n",
    "    if e == 2:\n",
    "        y_test_a.append(2)\n",
    "    else:\n",
    "        y_test_a.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "#random forest out of sample test (validation dat set)\n",
    "rfc.fit(x_fs,y_fs_a)\n",
    "rfc_vali_a = rfc.predict_proba(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max bets profit: 2.26       cutoff: 0.82         bets: 2         roi: 113.0%\n"
     ]
    }
   ],
   "source": [
    "output_vali_a(rfc_vali_a, odds3, y_test_a, 82)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
